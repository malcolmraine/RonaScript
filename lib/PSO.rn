module PSO is
begin

const TOPOLOGY_STAR: int = 1;
const TOPOLOGY_WHEEL: int = 2;
const TOPOLOGY_RING: int = 3;


/*****************************************************************************/
/*****************************************************************************/
class Particle is
begin
    var pbest: array = [];
    var x: array = [];
    var v: array = [];
    var c1: float = 0.0;
    var c2: float = 0.0;

    /*************************************************************************/
    routine construct(var dimension: int, var c1: float, var c2: float): object
    begin
        this->c1 = c1;
        this->c2 = c2;

        for (var i: int = 0; i < dimension; i++):
            array_push(this->x, 1);
            array_push(this->v, 1);
        end // loop
        return this;
    end // routine construct

    /*************************************************************************/
    routine __str(): string
    begin
        print("Particle(pbest=" + to_string(this->pbest) + ")");
    end

    /*************************************************************************/
    routine update(var w: float, var gbest: array): void
    begin
        var u1: float = 0.1;
        var u2: float = 0.1;

        for (var j: int = 0; j < count(this->x); j++):
            this->v[j] = w * this->v[j] +
                      (this->c1 * u1) * (this->pbest[j] - this->x[j]) +
                      (this->c2 * u2) * (gbest[j] - this->x[j]);
        end // loop
    end // routine update
end // class particle


/*****************************************************************************/
/*****************************************************************************/
class ParticleSwarmOptimizer is
begin
    var gbest: array = [];
    var dim: int = 1;
    var w: float = 0.1;
    var c1: float = 0.1;
    var c2: float = 0.1;
    var particles: array = [];
    var topology: int<1..3> = TOPOLOGY_RING;

    /*************************************************************************/
    routine construct(var n: int, var dimension: int, var c1: float, var c2: float): object
    begin
        for (var i: int = 0; i < n; i++):
            array_push(this->particles, Particle(dimension, this->c1, this->c2));
        end // loop
        return this;
    end // routine construct

    /*************************************************************************/
    routine update_particles(): void
    begin
        for (var i: int; i < count(this->particles); i++):
            this->particles[i]->update(this->w, this->gbest);
        end // loop
        print(this->particles);
    end // routine update_particles

    /*************************************************************************/
    routine update_inertia(): void
    begin

    end // routine update_inertia


end // class ParticleSwarmOptimizer

end // module PSO