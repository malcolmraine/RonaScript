/*****************************************************************************
* File: List.rn
* Description:
* Author: Malcolm Hall
* Date:
* Version: 1
*
* MIT License
*
* Copyright (c) 2020 - 2023 Malcolm Hall
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
******************************************************************************/

module List is
begin

/*****************************************************************************/
/*****************************************************************************/
class _SingleLinkNode is
begin
    var data: any = null;
    var next: object = null;

    routine construct(var x: any): object
    begin
        this->data = x;
        return this;
    end

end // class _Node


/*****************************************************************************/
/*****************************************************************************/
class ForwardList is
begin
    var head: _SingleLinkNode = null;
    var tail: _SingleLinkNode = null;
    var current: _SingleLinkNode = null;
    var _length: int = 0;

    /*************************************************************************/
    routine construct(): object
    begin
        return this;
    end

    /*************************************************************************/
    routine append(var data: any): void
    begin
        var node: _SingleLinkNode = _ListNode(data);
        this->_length += 1;
        if is_null(this->current):
            this->head = node;
        else:
            this->current->next = node;
            node->prev = this->current;
        end
        print(this->length());
        this->current = node;
    end

    /*************************************************************************/
    routine length(): int
    begin
        return this->_length;
    end

    /*************************************************************************/
    routine __getindex(var index: int): any
    begin
        var node: object = this->head;
        for (var i: int = 0; i < index; i++):
            node = node->next;
        end
        return node;
    end // routine __getindex
end

end // module List