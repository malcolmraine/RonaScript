/*****************************************************************************
* File: Collection.rn
* Description:
* Author: Malcolm Hall
* Date:
* Version: 1
*
* MIT License
*
* Copyright (c) 2020 - 2023 Malcolm Hall
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
******************************************************************************/

class Collection is
begin
    var _data: array = [];

    /**************************************************************************/
    routine construct(var data: array): object
    begin
        this->_data = data;
        return this;
    end // routine construct

    /**************************************************************************/
    routine data(): array
    begin
        return this->_data;
    end // __routine data

    /**************************************************************************/
    routine at(var index: int): any
    begin
        if index > 0 && index < count(this->_data):
            return this->_data[index];
        else:
            return null;
        end
    end // __routine at

    /**************************************************************************/
    routine __plus(var other: any): object
    begin
        var result: object = this->clone();
        result->extend(other);

        return result;
    end // routine __plus

    /**************************************************************************/
    routine __div(var other: any): object
    begin
        var result: object = Collection([]);
        var n: int = count(this->_data);
        var r: int = 0;

        if is_object(other):
            r = other->length();
        else:
            r = count(other);
        end

        for (var i: int = 0; i < n; i++):
            var item: any = this->_data[i];

            for (var j: int = 0; j < r; j++):
                if item == other[j]:
                    result->append(item);
                end
            end
        end

        return result;
    end // routine __div

    /**************************************************************************/
    routine __str(): string
    begin
        return "Collection(" + to_string(this->_data) + ")";
    end // routine __str

    /**************************************************************************/
    routine __getindex(var index: int): any
    begin
        return this->_data[index];
    end // routine __getindex

    /**************************************************************************/
    routine append(var item: any): void
    begin
        array_push(this->_data, item);
    end // routine append

    /**************************************************************************/
    routine extend(var other: any): void
    begin
        var n: int = 0;
        if is_object(other):
            n = other->length();
        else:
            n = count(other);
        end

        for (var i: int = 0; i < n; i++):
            this->append(other[i]);
        end
    end // routine extend

    /**************************************************************************/
    routine unique(): object
    begin
        var result: object = Collection([]);
        var n: int = count(this->_data);

        for (var i: int = 0; i < n; i++):
            var item: any = this->_data[i];

            var item_exists: bool = false;
            for (var j: int = 0; j < result->length(); j++):
                if item == result[j]:
                    item_exists = true;
                    break;
                end
            end

            if !item_exists:
                result->append(item);
            end
            item_exists = false;
        end
        return result;
    end // routine unique

    /**************************************************************************/
    routine clear(): void
    begin
        this->_data = [];
    end // routine clear

    /**************************************************************************/
    routine empty(): bool
    begin
        return count(this->_data) == 0;
    end // routine empty

    /**************************************************************************/
    routine max(): any
    begin
        if this->empty():
            return null;
        end

        var result: any = this->_data[0];
        var n: int = count(this->_data);
        for (var i: int = 1; i < n; i++):
            if this->_data[i] > result:
                result = this->_data[i];
            end
        end

        return result;
    end // routine max

    /**************************************************************************/
    routine min(): any
    begin
        if this->empty():
            return null;
        end

        var result: any = this->_data[0];
        var n: int = count(this->_data);
        for (var i: int = 1; i < n; i++):
            if this->_data[i] < result:
                result = this->_data[i];
            end
        end

        return result;
    end // routine min

    /**************************************************************************/
    routine clone(): object
    begin
        return Collection(this->_data);
    end // routine clone

    /**************************************************************************/
    routine length(): int
    begin
        return count(this->_data);
    end // routine length

    /**************************************************************************/
    routine foreach(var fn: callable): void
    begin
        for (var i: int = 0; i < count(this->_data); i++):
            fn(this->_data[i]);
        end
    end // routine foreach

end // class Collection

