/*****************************************************************************
* File: Path.rn
* Description:
* Author: Malcolm Hall
* Date:
* Version: 1
*
* MIT License
*
* Copyright (c) 2020 - 2023 Malcolm Hall
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
******************************************************************************/

class Path is
begin
    var _path: string = "";

    routine construct(var path: any): object
    begin
        if instanceof(path, Path):
            this->_path = to_string(path);
        else:
            this->_path = path;
        end
        return this;
    end

    routine __str(): string
    begin
        return this->_path;
    end

   routine __div(var other: any): object
   begin
       if is_string(other):
            return Path(this->_path + "/" + other);
       elif instanceof(other, Path):
           return Path(this->_path + "/" + to_string(other));
       end
   end

   routine ext(): string
   begin
       var parts: array = str_split(this->_path, ".");
       return "." + parts[count(parts) - 1];
   end

   routine with_ext(var extension: string): string
   begin
       var parts: array = str_split(this->_path, ".");
       return Path(str_join(slice(parts, 0, count(parts) - 1), ".") + extension);
   end

end // class Path
