/*****************************************************************************
* File: File.rn
* Description:
* Author: Malcolm Hall
* Date:
* Version: 1
*
* MIT License
*
* Copyright (c) 2020 - 2023 Malcolm Hall
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
******************************************************************************/

/******************************************************************************/
/******************************************************************************/
module File is
begin
    const READONLY: int = 0;
    const WRITEONLY: int = 1;
    const READWRITE: int = 2;
    const APPEND: int = 8;
    const CREATE: int = 512;
    const TRUNCATE: int = 1024;

/******************************************************************************/
class FileObject is
begin
    var fd: int = -1;
    var path: string = "";

    /**************************************************************************/
    routine construct(var file_path: string): object
    begin
        this->path = file_path;
        return this;
    end // routine construct

    /**************************************************************************/
    routine open(var flags: int): bool
    begin
        this->fd = _file_open(this->path, flags);
        print(this->fd);
        if (this->fd == -1):
            return false;
        end
        return true;
    end // routine open

    /**************************************************************************/
    routine close(): void
    begin
        _file_fd_close(this->fd);
    end // routine close

    /**************************************************************************/
    routine readall(): string
    begin
        return _file_fd_read(this->fd, file_size(this->path));
    end // routine readall

    /**************************************************************************/
    routine read(var n: int): string
    begin
        return _file_fd_read(this->fd, n);
    end // routine read
end // class FileObject

/******************************************************************************/
routine open(var path: string, var flags: int): object
begin
    var file: object = FileObject(path);
    file->open(flags);
    return file;
end

end // module File
